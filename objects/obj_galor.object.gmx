<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_galor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while (distance_to_object(obj_player) &lt; 150)
{
    x = random(room_width);
    y = random(room_height);
}

direction = random(360);
speed = 0.5 + random(2);
image_angle = direction;

phasercharge = 0


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create particle system
partexplode_sys = part_system_create();

//create particles
partexplode = part_type_create();
part_type_shape(partexplode, pt_shape_flare);
part_type_size(partexplode, .8, 1.2, -.01, 0)
part_type_speed(partexplode, .5, 1, 0, 0);
part_type_direction(partexplode, 0, 359, 0, 0);
part_type_blend(partexplode, 1);
part_type_colour3(partexplode, c_navy, c_orange, c_yellow);
part_type_alpha2(partexplode, 1, .2);

partdebris = part_type_create();
part_type_size(partdebris, 1, 2, 0, 0);
part_type_speed(partdebris, .5, 1, 0, 0);
part_type_direction(partdebris, 0, 359, 0, 0);
part_type_colour1(partdebris, c_gray);

//Create emitter
partexplode_emit = part_emitter_create(partexplode_sys);
part_emitter_region(partexplode_sys, partexplode_emit, x - 20, x + 20, y - 20, y + 20, ps_shape_ellipse, ps_distr_gaussian);
part_emitter_burst(partexplode_sys, partexplode_emit, partexplode, 40 + irandom(20)); 
part_emitter_burst(partexplode_sys, partexplode_emit, partdebris, 10 + irandom(5)); 



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_movement_galor();

if (!instance_exists(obj_galor)) {
    part_system_destroy(partexplode_sys);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision damage

direction = random(360);
image_angle = direction;
speed = 20;

halfhp = global.hpshields / 2;
halfhull = global.hphull / 2;

//show_debug_message(string(halfhull));
//show_debug_message(string(halfhp));

with (other) {

    instance_destroy();
    
}

if (global.hpshields &gt; 0) {

    global.hpshields = global.hpshields - halfhp;
}

if (global.hphull &gt; 0) and (global.hpshields = 0) {

    global.hphull = global.hphull - halfhull;
    
}

audio_play_sound(snd_galor_explosion, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>112</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_wrap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
